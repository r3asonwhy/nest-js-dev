name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # Job to run tests on pull requests and pushes to main
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test -- --watch=false --bail --ci

  # Job to deploy to AWS Elastic Beanstalk on push to main
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # Check out the code
      - name: Check out repository
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Build the project
      - name: Build the project
        run: npm run build

      # Package only the 'dist' folder and necessary files
      - name: Package deployment files
        run: |
          mkdir deploy
          cp -R dist deploy/dist          # Copy the 'dist' folder
          cp package.json deploy/         # Include package.json
          cp package-lock.json deploy/    # Include package-lock.json
          cd deploy
          zip -r ../deploy.zip .          # Zip the contents of the 'deploy' directory
          cd ..

      # Deploy to AWS Elastic Beanstalk
      - name: Deploy to Elastic Beanstalk
        uses: aws-actions/elastic-beanstalk-deploy@v1
        with:
          name: nest-js-application
          environment-name: nest-js-demo-env
          version-label: 'v-${{ github.sha }}'
          region: ${{ secrets.AWS_REGION }}
          deployment-package: deploy.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
